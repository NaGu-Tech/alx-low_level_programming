!<arch>
0-isupper.c/    0           0     0     644     204       `
#include "main.h"

/**
  *_isupper -> this is a function to check upper case alphas
  *@c: an integer paramer
  *Return: something but success
  */
int _isupper(int c)
{
	return (c >= 'A' && c <= 'Z');
}
0-memset.c/     0           0     0     644     466       `
#include "main.h"

/**
  * _memset - fills memory with a constant byte n amount of times
  * @s: pointer that has the address of the memory to fill
  * @b: constant byte that will be written into the momory
  * @n: amount of times the byte will be written into the memory
  *
  * Return: address of the memory where thebyte was written
  */
char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		s[i] = b;
	}
	return (s);
}
0-strcat.c/     0           0     0     644     419       `
#include "main.h"

/**
  * _strcat - concatenates @src to @dest
  * @src: the source string to append to @dest
  * @dest: the destination string to be concatenated upon
  * Return: pointer to the resulting string
  */
char *_strcat(char *dest, char *src)
{
	int index = 0;
	int dest_len = 0;

	while (dest[index++])
		dest_len++;
	for (index = 0; src[index]; index++)
		dest[dest_len++] = src[index];
	return (dest);
}

100-atoi.c/     0           0     0     644     360       `
#include "main.h"

/**
  *_atoi - changes a string to an int
  *@s: the string to be changed
  *
  *Return: the converted int
  */

int _atoi(char *s)
{
	int i = 1;

	unsigned int num = 0;

	do {
		if (*s == '-')
			i *= -1;
		else if (*s >= '0' && *s <= '9')
			num = num * 10 + (*s - '0');
		else if (num > 0)
			break;
	} while (*s++);
	return (num * i);
}
1-isdigit.c/    0           0     0     644     174       `
#include "main.h"

/**
  *_isdigit - function to check for a digit
  *@c: an integer argument
  *Return: success
  */
int _isdigit(int c)
{
	return (c >= '0' && c <= '9');
}
1-memcpy.c/     0           0     0     644     434       `
#include "main.h"

/**
  * _memcpy - copies memory area from src to dest n amount of times
  * @dest: pointer that will receive the copied data
  * @src: pointer that has the information to be copied
  * @n: amount of times the src information willbe copied to dest
  *
  * Return: dest
  */
char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		dest[i] = src[i];
	}
	return (dest);
}
1-strncat.c/    0           0     0     644     547       `
#include "main.h"

/**
  * _strncat - concatenates two strings using at most
  *  an inputted number of bytes from src.
  * @dest: The string to be appended upon.
  * @src: The string to be appended to dest.
  * @n: The number of bytes from src to be appended to dest.
  *
  * Return: A pointer to the resulting string dest.
  */
char *_strncat(char *dest, char *src, int n)
{
	int index = 0, dest_len = 0;

	while (dest[index++])
		dest_len++;
	for (index = 0; src[index] && index < n; index++)
		dest[dest_len++] = src[index];
	return (dest);
}

2-strchr.c/     0           0     0     644     417       `
#include "main.h"
#include <stddef.h>

/**
  * _strchr - locates a character in a string
  * @s: pointer that contains the address of the string
  * @c: character that needs to be located with in the string
  *
  * Return: address of the first occurrence of c in the string
  */
char *_strchr(char *s, char c)
{
	char *i = s;

	while (*i != 0 && *i != c)
	{
		i++;
	}
	if (*i != c)
	{
		return (0);
	}
	return (i);
}

2-strlen.c/     0           0     0     644     280       `
#include "main.h"

/**
  *_strlen - Finds the length of a sting.
  *@s: String pointer to string whose length is to be found
  *Return: returns the length of the string.
  */
int _strlen(char *s)
{
	int p, q;

	q = 0;

	for (p = 0; s[p] != '\0'; p++)
	{
		q++;
	}

	return (q);
}
2-strncpy.c/    0           0     0     644     388       `
#include "main.h"

/**
  * _strncpy - copy a string
  * @dest: The destination value
  * @src: The source value
  * @n: The copy limit
  *
  * Return: char value
  */
char *_strncpy(char *dest, char *src, int n)
{
	int a = 0, b = 0;

	while (src[b])
	{
		b++;
	}

	while (a < n && src[a])
	{
		dest[a] = src[a];
		a++;
	}

	while (a < n)
	{
		dest[a] = '\0';
		a++;
	}

	return (dest);
}
3-islower.c/    0           0     0     644     209       `
#include "main.h"

/**
  *_islower -> checks if the character is lowercase
  *@c: a character argument
  *Return: returns 0 depending on condition
  */

int _islower(int c)
{
	return (c >= 'a' && c <= 'z');
}

3-puts.c/       0           0     0     644     238       `
#include "main.h"

/**
  *_puts - prints a string
  *@str: string to print
  *
  *Description: prints a string
  *Return: prints the number of a character
  */
void _puts(char *str)
{
	while (*str)
		_putchar(*str++);

	_putchar('\n');
}
3-strcmp.c/     0           0     0     644     468       `
#include "main.h"

/**
  * _strcmp - Compares two strings
  * @s1: The first string
  * @s2: The second string
  *
  * Return: int value
  */
int _strcmp(char *s1, char *s2)
{
	int a = 0, b = 0, c = 0, r = 0, lim;

	while (s1[a])
	{
		a++;
	}
	while (s2[b])
	{
		b++;
	}
	if (a <= b)
	{
		lim = a;
	}
	else
	{
		lim = b;
	}
	while (c <= lim)
	{
		if (s1[c] == s2[c])
		{
			c++;
			continue;
		}
		else
		{
			r = s1[c] - s2[c];
			break;
		}
		c++;
	}
	return (r);
}
3-strspn.c/     0           0     0     644     524       `
#include "main.h"

/**
  * _strspn - gets the length of a prefix substring
  * @s: pointer that contains the string to be evaluated
  * @accept: pointer that contains the substring that will condition s
  *
  * Return: length of s which contains characters in accept
  */
unsigned int _strspn(char *s, char *accept)
{
	int i;
	int j;
	int k;

	for (i = 0; s[i] != 0; i++)
	{
		k = 0;
		for (j = 0; accept[j] != 0; j++)
		{
			if (s[i] == accept[j])
			{
				k = 1;
			}
		}
		if (k == 0)
		{
			break;
		}
	}
	return (i);
}
4-isalpha.c/    0           0     0     644     246       `
#include "main.h"

/**
  * _isalpha - checks for alphabetical letter
  * @c: a character to be checked on
  *Return: returns 0 or 1 depending on condition
  */

int _isalpha(int c)
{
	return  ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'));
}
4-strpbrk.c/    0           0     0     644     478       `
#include "main.h"

/**
  * _strpbrk - searches a string for any of a set of bytes
  * @s: pointer that contains the address of the string to be evaluated
  * @accept: pointer that contains the string to evaluate s
  *
  * Return: address of the first occurrence of accept in the strung
  */
char *_strpbrk(char *s, char *accept)
{
	int i;

	while (*s != 0)
	{
		for (i = 0; accept[i] != 0; i++)
		{
			if (*s == accept[i])
			{
				return (s);
			}
		}
		s++;
	}
	return (0);
}
5-strstr.c/     0           0     0     644     750       `
#include "main.h"

/**
  * _strstr - locates a string within a string
  * @haystack: pointer that contains the address of the string to be evaluated
  * @needle: pointer that contains the string to evaluate @haystack
  *
  * Return: address of the located string in @haystack if no substring is found
  *then return NULL
  */
char *_strstr(char *haystack, char *needle)
{
	int i = 0;
	int j = 0;
	int a;
	int compare = 0;

	if (*needle == 0)
	{
		return (haystack);
	}
	while (haystack[i] != 0)
	{
		j = 0;
		a = i;
		while (needle[j] != 0)
		{
			if (needle[j] == haystack[a])
			{
				compare = 1;
			}
			else
			{
				compare = 0;
				break;
			}
			j++;
			a++;
		}
		if (compare == 1)
		{
			return (haystack + i);
		}
		i++;
	}
	return (0);
}
6-abs.c/        0           0     0     644     185       `
#include "main.h"

/**
  * _abs -> return absolute value of a number
  *@n: parameter
  *Return: absolute value of a number
  */

int _abs(int n)
{
	if (n < 0)
		n = -n;
	return (n);
}

9-strcpy.c/     0           0     0     644     407       `
#include "main.h"
#include <stdio.h>

/**
 *_strcpy - copies the pointed string by src
 *including the terminating null byte to the
 *buffer pointed to by dest.
 *@dest: destination
 *@src: source
 *Return: return dest
 */
char *_strcpy(char *dest, char *src)
{
	int count = 0;

	while (*(src + count) != '\0')
	{
		*(dest + count) = *(src + count);
		count++;
	}
	*(dest + count) = '\0';
	return (dest);
}

main.c/         0           0     0     644     142       `
#include "main.h"

int main(void)
{
	_puts("\"At the end of the day, my goal was to be the best hacker\"\n\t- Kevin Mitnick");
	return (0);
}
_putchar.c/     0           0     0     644     250       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */

int _putchar(char c)

{
	return (write(1, &c, 1));

}
